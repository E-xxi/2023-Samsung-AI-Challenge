{"cells":[{"cell_type":"markdown","id":"d73d24e3-5c9e-4ade-9e6e-ca6f46a2d914","metadata":{"id":"d73d24e3-5c9e-4ade-9e6e-ca6f46a2d914"},"source":["## Import"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t9LMBACBdu6H","executionInfo":{"status":"ok","timestamp":1693750718856,"user_tz":-540,"elapsed":18466,"user":{"displayName":"이지원","userId":"01120483368448318465"}},"outputId":"16955d04-6cf7-4c74-e087-aa967ca83811"},"id":"t9LMBACBdu6H","execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/samsung_ai_challenge"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MZE9wrEmdylV","executionInfo":{"status":"ok","timestamp":1693750718857,"user_tz":-540,"elapsed":10,"user":{"displayName":"이지원","userId":"01120483368448318465"}},"outputId":"7cd33926-1d31-4519-f9cc-f054ee411001"},"id":"MZE9wrEmdylV","execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/samsung_ai_challenge\n"]}]},{"cell_type":"code","source":["!ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tAxcWViojAh9","executionInfo":{"status":"ok","timestamp":1693750718857,"user_tz":-540,"elapsed":8,"user":{"displayName":"이지원","userId":"01120483368448318465"}},"outputId":"7b79cf28-46f1-4267-97a8-587dd47d8fa0"},"id":"tAxcWViojAh9","execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["baseline_submit.csv    test.csv\t\t   train_target.csv\n","distort_image\t       test_image\t   train_target_image\n","FisheyeSeg\t       train_source.csv    val_source.csv\n","open.zip\t       train_source_gt\t   val_source_gt\n","sample_submission.csv  train_source_image  val_source_image\n"]}]},{"cell_type":"code","execution_count":4,"id":"ad9b681e-370a-4cfa-a452-dd2d7f0cd77f","metadata":{"id":"ad9b681e-370a-4cfa-a452-dd2d7f0cd77f","executionInfo":{"status":"ok","timestamp":1693750725576,"user_tz":-540,"elapsed":6724,"user":{"displayName":"이지원","userId":"01120483368448318465"}}},"outputs":[],"source":["import os\n","import cv2\n","from PIL import Image\n","import pandas as pd\n","import numpy as np\n","\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","from torchvision import transforms\n","\n","from tqdm import tqdm\n","import albumentations as A\n","from albumentations.pytorch import ToTensorV2\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"]},{"cell_type":"markdown","id":"20ff3de5-0d0e-497b-ac75-d5179a3f65d3","metadata":{"id":"20ff3de5-0d0e-497b-ac75-d5179a3f65d3"},"source":["## Utils"]},{"cell_type":"code","execution_count":5,"id":"838e1d83-8670-407b-82f6-bf9652f58639","metadata":{"id":"838e1d83-8670-407b-82f6-bf9652f58639","executionInfo":{"status":"ok","timestamp":1693750725577,"user_tz":-540,"elapsed":13,"user":{"displayName":"이지원","userId":"01120483368448318465"}}},"outputs":[],"source":["# RLE 인코딩 함수\n","def rle_encode(mask):\n","    pixels = mask.flatten()\n","    pixels = np.concatenate([[0], pixels, [0]])\n","    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n","    runs[1::2] -= runs[::2]\n","    return ' '.join(str(x) for x in runs)"]},{"cell_type":"markdown","id":"be76a29e-e9c2-411a-a569-04166f074184","metadata":{"id":"be76a29e-e9c2-411a-a569-04166f074184"},"source":["## Custom Dataset"]},{"cell_type":"code","execution_count":18,"id":"a8496767-2f64-4285-bec4-c6f53a1fd9d2","metadata":{"id":"a8496767-2f64-4285-bec4-c6f53a1fd9d2","executionInfo":{"status":"ok","timestamp":1693755873138,"user_tz":-540,"elapsed":363,"user":{"displayName":"이지원","userId":"01120483368448318465"}}},"outputs":[],"source":["class CustomDataset(Dataset):\n","    def __init__(self, csv_file, transform=None, infer=False):\n","        self.data = pd.read_csv(csv_file)\n","        self.transform = transform\n","        self.infer = infer\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        img_path = self.data.iloc[idx, 1]\n","        new_path = \"/content/drive/MyDrive/samsung_ai_challenge/distort_image\"\n","        new_path += img_path.split(\".\")[1] +'.png'\n","\n","        # 피셔 아이 왜곡 적용\n","        image = cv2.imread(new_path)\n","        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","        if self.infer:\n","            if self.transform:\n","                image = self.transform(image=image)['image']\n","            return image\n","\n","        mask_path = self.data.iloc[idx, 2]\n","        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n","        mask[mask == 255] = 12 #배경을 픽셀값 12로 간주\n","\n","        if self.transform:\n","            augmented = self.transform(image=image, mask=mask)\n","            image = augmented['image']\n","            mask = augmented['mask']\n","\n","        return image, mask"]},{"cell_type":"markdown","id":"dc955893-22fd-4320-88be-7aa0d790cbd9","metadata":{"id":"dc955893-22fd-4320-88be-7aa0d790cbd9"},"source":["## Data Loader"]},{"cell_type":"code","execution_count":11,"id":"1b708503-2ff9-4584-9d73-40990b3572f8","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1b708503-2ff9-4584-9d73-40990b3572f8","executionInfo":{"status":"ok","timestamp":1693751331231,"user_tz":-540,"elapsed":447,"user":{"displayName":"이지원","userId":"01120483368448318465"}},"outputId":"ed522665-2af8-4dbb-b584-c4a65d0ef215"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(_create_warning_msg(\n"]}],"source":["transform = A.Compose(\n","    [\n","        A.Resize(224, 224),\n","        A.Normalize(),\n","        ToTensorV2()\n","    ]\n",")\n","\n","dataset = CustomDataset(csv_file='train_source.csv', transform=transform)\n","dataloader = DataLoader(dataset, batch_size=16, shuffle=True, num_workers=4)"]},{"cell_type":"markdown","id":"f42501fc-b573-4893-a7c4-5e280dfdaf09","metadata":{"id":"f42501fc-b573-4893-a7c4-5e280dfdaf09"},"source":["## Define Model"]},{"cell_type":"code","source":["# U-Net의 기본 구성 요소인 Double Convolution Block을 정의합니다.\n","def double_conv(in_channels, out_channels):\n","    return nn.Sequential(\n","        nn.Conv2d(in_channels, out_channels, 3, padding=1),\n","        nn.Sigmoid(),\n","        nn.Conv2d(out_channels, out_channels, 3, padding=1),\n","        nn.Sigmoid()\n","    )\n","\n","# 간단한 U-Net 모델 정의\n","class UNet(nn.Module):\n","    def __init__(self):\n","        super(UNet, self).__init__()\n","        self.dconv_down1 = double_conv(3, 64)\n","        self.dconv_down2 = double_conv(64, 128)\n","        self.dconv_down3 = double_conv(128, 256)\n","        self.dconv_down4 = double_conv(256, 512)\n","\n","        self.maxpool = nn.MaxPool2d(2)\n","        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n","\n","        self.dconv_up3 = double_conv(256 + 512, 256)\n","        self.dconv_up2 = double_conv(128 + 256, 128)\n","        self.dconv_up1 = double_conv(128 + 64, 64)\n","\n","        self.conv_last = nn.Conv2d(64, 13, 1) # 12개 class + 1 background\n","\n","    def forward(self, x):\n","        conv1 = self.dconv_down1(x)\n","        x = self.maxpool(conv1)\n","\n","        conv2 = self.dconv_down2(x)\n","        x = self.maxpool(conv2)\n","\n","        conv3 = self.dconv_down3(x)\n","        x = self.maxpool(conv3)\n","\n","        x = self.dconv_down4(x)\n","\n","        x = self.upsample(x)\n","        x = torch.cat([x, conv3], dim=1)\n","\n","        x = self.dconv_up3(x)\n","        x = self.upsample(x)\n","        x = torch.cat([x, conv2], dim=1)\n","\n","        x = self.dconv_up2(x)\n","        x = self.upsample(x)\n","        x = torch.cat([x, conv1], dim=1)\n","\n","        x = self.dconv_up1(x)\n","\n","        out = self.conv_last(x)\n","\n","        return out"],"metadata":{"id":"eW3lsd3jWVJ-","executionInfo":{"status":"ok","timestamp":1693751333084,"user_tz":-540,"elapsed":472,"user":{"displayName":"이지원","userId":"01120483368448318465"}}},"id":"eW3lsd3jWVJ-","execution_count":12,"outputs":[]},{"cell_type":"markdown","id":"a0895765-fba0-4fd9-b955-a6c0e43012e9","metadata":{"id":"a0895765-fba0-4fd9-b955-a6c0e43012e9"},"source":["## Model Train"]},{"cell_type":"code","execution_count":13,"id":"63efb381-98c6-4d9b-a3b6-bd11c7fa8c41","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"63efb381-98c6-4d9b-a3b6-bd11c7fa8c41","executionInfo":{"status":"ok","timestamp":1693753721180,"user_tz":-540,"elapsed":2386553,"user":{"displayName":"이지원","userId":"01120483368448318465"}},"outputId":"f49c0b96-e213-4b17-e8ad-a89404f068da"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [08:50<00:00,  3.84s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1, Loss: 1.97597292713497\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:35<00:00,  1.45it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 2, Loss: 1.9139085204704949\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:35<00:00,  1.45it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 3, Loss: 1.8359623741412507\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:37<00:00,  1.41it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 4, Loss: 1.7777193836543872\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:36<00:00,  1.43it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 5, Loss: 1.6497161725293035\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:36<00:00,  1.43it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 6, Loss: 1.5551818445108938\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:37<00:00,  1.42it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 7, Loss: 1.4496556615483933\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:36<00:00,  1.43it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 8, Loss: 1.3802675656650378\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:39<00:00,  1.39it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 9, Loss: 1.3216284548026929\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:37<00:00,  1.42it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 10, Loss: 1.2864661804143933\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:39<00:00,  1.39it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 11, Loss: 1.2569207048070603\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:37<00:00,  1.42it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 12, Loss: 1.2643348997917727\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:38<00:00,  1.40it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 13, Loss: 1.2345040958860647\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:39<00:00,  1.39it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 14, Loss: 1.19944975859877\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:40<00:00,  1.38it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 15, Loss: 1.1870203139125437\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:38<00:00,  1.41it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 16, Loss: 1.1711848818737527\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:38<00:00,  1.40it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 17, Loss: 1.214568845603777\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:36<00:00,  1.42it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 18, Loss: 1.1790687925573708\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:39<00:00,  1.39it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 19, Loss: 1.1542200791663018\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 138/138 [01:37<00:00,  1.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch 20, Loss: 1.148616868516673\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["# model 초기화\n","model = UNet().to(device)\n","\n","# loss function과 optimizer 정의\n","criterion = torch.nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n","\n","# training loop\n","for epoch in range(20):  # 20 에폭 동안 학습합니다.\n","    model.train()\n","    epoch_loss = 0\n","    for images, masks in tqdm(dataloader):\n","        images = images.float().to(device)\n","        masks = masks.long().to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model(images)\n","        loss = criterion(outputs, masks.squeeze(1))\n","        loss.backward()\n","        optimizer.step()\n","\n","        epoch_loss += loss.item()\n","\n","    print(f'Epoch {epoch+1}, Loss: {epoch_loss/len(dataloader)}')"]},{"cell_type":"markdown","id":"c32eb51c-a3fe-4e11-a616-3a717ba16f7e","metadata":{"id":"c32eb51c-a3fe-4e11-a616-3a717ba16f7e"},"source":["## Inference"]},{"cell_type":"code","execution_count":14,"id":"12371c8b-0c78-47df-89ec-2d8b55c8ea94","metadata":{"id":"12371c8b-0c78-47df-89ec-2d8b55c8ea94","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1693755811214,"user_tz":-540,"elapsed":684,"user":{"displayName":"이지원","userId":"01120483368448318465"}},"outputId":"b383029e-6643-47bc-f649-fea3fcc4b7b9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(_create_warning_msg(\n"]}],"source":["test_dataset = CustomDataset(csv_file='test.csv', transform=transform, infer=True)\n","test_dataloader = DataLoader(test_dataset, batch_size=16, shuffle=False, num_workers=4)"]},{"cell_type":"code","source":["dir_path = os.getcwd()\n","file_list = os.listdir(dir_path)\n","\n","print(dir_path)\n","print(file_list)"],"metadata":{"id":"KiW6da8eulcP"},"id":"KiW6da8eulcP","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":21,"id":"355b431c-ac8e-4c40-9046-4d53e4bab14a","metadata":{"id":"355b431c-ac8e-4c40-9046-4d53e4bab14a","outputId":"1fa739ca-383b-4b4d-ddaf-1cac43e4ac5b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1693756392406,"user_tz":-540,"elapsed":346946,"user":{"displayName":"이지원","userId":"01120483368448318465"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [05:46<00:00,  2.91s/it]\n"]}],"source":["with torch.no_grad():\n","    model.eval()\n","    result = []\n","    for images in tqdm(test_dataloader):\n","\n","\n","        images = images.float().to(device)\n","        outputs = model(images)\n","        outputs = torch.softmax(outputs, dim=1).cpu()\n","        outputs = torch.argmax(outputs, dim=1).numpy()\n","        # batch에 존재하는 각 이미지에 대해서 반복\n","        for pred in outputs:\n","            pred = pred.astype(np.uint8)\n","            pred = Image.fromarray(pred) # 이미지로 변환\n","            pred = pred.resize((960, 540), Image.NEAREST) # 960 x 540 사이즈로 변환\n","            pred = np.array(pred) # 다시 수치로 변환\n","            # class 0 ~ 11에 해당하는 경우에 마스크 형성 / 12(배경)는 제외하고 진행\n","            for class_id in range(12):\n","                class_mask = (pred == class_id).astype(np.uint8)\n","                if np.sum(class_mask) > 0: # 마스크가 존재하는 경우 encode\n","                    mask_rle = rle_encode(class_mask)\n","                    result.append(mask_rle)\n","                else: # 마스크가 존재하지 않는 경우 -1\n","                    result.append(-1)"]},{"cell_type":"markdown","id":"36c2cbbb-04f1-4f9c-b4df-4b744dfce046","metadata":{"id":"36c2cbbb-04f1-4f9c-b4df-4b744dfce046"},"source":["## Submission"]},{"cell_type":"code","execution_count":22,"id":"35ac2a0b","metadata":{"id":"35ac2a0b","outputId":"6336ea1a-799b-46df-9287-52066e25d20d","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1693756392861,"user_tz":-540,"elapsed":458,"user":{"displayName":"이지원","userId":"01120483368448318465"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                       id                                           mask_rle\n","0       TEST_0000_class_0  89178 13 90138 13 91090 25 92050 25 93005 30 9...\n","1       TEST_0000_class_1                                                 -1\n","2       TEST_0000_class_2  5757 4 6717 4 7677 4 8637 4 9597 4 10535 26 11...\n","3       TEST_0000_class_3                                                 -1\n","4       TEST_0000_class_4                                                 -1\n","...                   ...                                                ...\n","22771   TEST_1897_class_7  19167 17 20127 17 21087 17 22051 13 23011 13 2...\n","22772   TEST_1897_class_8  1 5756 5761 956 6721 956 7681 956 8641 956 960...\n","22773   TEST_1897_class_9                                                 -1\n","22774  TEST_1897_class_10                                                 -1\n","22775  TEST_1897_class_11  23838 26 24798 26 25758 26 26710 42 27670 42 2...\n","\n","[22776 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-6a12dea4-88a3-4fc4-bfbf-19120c036c16\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>mask_rle</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>TEST_0000_class_0</td>\n","      <td>89178 13 90138 13 91090 25 92050 25 93005 30 9...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>TEST_0000_class_1</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>TEST_0000_class_2</td>\n","      <td>5757 4 6717 4 7677 4 8637 4 9597 4 10535 26 11...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>TEST_0000_class_3</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>TEST_0000_class_4</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>22771</th>\n","      <td>TEST_1897_class_7</td>\n","      <td>19167 17 20127 17 21087 17 22051 13 23011 13 2...</td>\n","    </tr>\n","    <tr>\n","      <th>22772</th>\n","      <td>TEST_1897_class_8</td>\n","      <td>1 5756 5761 956 6721 956 7681 956 8641 956 960...</td>\n","    </tr>\n","    <tr>\n","      <th>22773</th>\n","      <td>TEST_1897_class_9</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>22774</th>\n","      <td>TEST_1897_class_10</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>22775</th>\n","      <td>TEST_1897_class_11</td>\n","      <td>23838 26 24798 26 25758 26 26710 42 27670 42 2...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>22776 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a12dea4-88a3-4fc4-bfbf-19120c036c16')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6a12dea4-88a3-4fc4-bfbf-19120c036c16 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6a12dea4-88a3-4fc4-bfbf-19120c036c16');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dced8ce3-bfe0-4714-9ac7-c4a782ad654f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dced8ce3-bfe0-4714-9ac7-c4a782ad654f')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dced8ce3-bfe0-4714-9ac7-c4a782ad654f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":22}],"source":["submit = pd.read_csv('sample_submission.csv')\n","submit['mask_rle'] = result\n","submit"]},{"cell_type":"code","execution_count":23,"id":"da10cb6f-0826-4755-a376-97b695ae8f86","metadata":{"id":"da10cb6f-0826-4755-a376-97b695ae8f86","executionInfo":{"status":"ok","timestamp":1693756396344,"user_tz":-540,"elapsed":3492,"user":{"displayName":"이지원","userId":"01120483368448318465"}}},"outputs":[],"source":["submit.to_csv('baseline_submit.csv', index=False)"]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.12"},"colab":{"provenance":[{"file_id":"1DtSNCtrh0eGiOfbOfWSwjy5VA-91SsiX","timestamp":1693724901573}],"gpuType":"T4","collapsed_sections":["d73d24e3-5c9e-4ade-9e6e-ca6f46a2d914"]},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":5}